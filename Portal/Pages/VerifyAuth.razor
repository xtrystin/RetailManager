@page "/verifyauth"
@inject IProductEndpoint Products

<h3>Verify Auth</h3>

@if (isAuthenticated)
{
    <h4>@userName is authenticated</h4>
    <ul>
        <li>Access to Admin Role: @isAdminUser</li>
        <li>Access to Cashier Role: @isCashier</li>
        <li>Access to Manager Role: @isManager</li>
    </ul>
}
else
{
    <h4>The user is not authenticated</h4>
}

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState {  get;  set; }

    private bool isAuthenticated = false;
    private string userName;
    private bool isAdminUser = false;
    private bool isCashier = false;
    private bool isManager = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;

        if (authState.User.Identity.IsAuthenticated)
        {
            isAuthenticated = true;

            try
            {
                List<ProductModel> data = await Products.GetAll();

                foreach (var p in data)
                {
                    Console.WriteLine(p.Description);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }

            userName = authState.User.FindFirst(ClaimTypes.Name).Value;
 
            isAdminUser = authState.User.IsInRole("Admin");
            isCashier = authState.User.IsInRole("Cashier");
            isManager = authState.User.IsInRole("Manager");
        }
    }
}
